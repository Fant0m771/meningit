<?php
/**
 * @file
 * This code is taken from this issue below to solve challenges with
 * Field Collections - https://drupal.org/node/1817956
 * TODO: Remove this once patch for UUID works.
 */

/**
 * Implements hook_entity_uuid_load().
 */
function pfizer_deploy_fc_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'field_collection_item') {
    watchdog('pfizer_deploy_fc', 'entity load: <pre>%args</pre>', array('%args' => print_r($entities, TRUE)));
    entity_property_id_to_uuid($entities, 'field_collection_item', 'value');
    // Flag that this entity has been universalised.
    foreach ($entities as $entity) {
      $entity->__uuid_universalized = TRUE;
    }
  }
}

/**
 * Implements hook_entity_uuid_presave().
 */
function pfizer_deploy_fc_entity_uuid_presave(&$entity, $entity_type) {
  if ($entity_type == 'field_collection_item') {
    watchdog('pfizer_deploy_fc', 'entity presave: <pre>%args</pre>', array('%args' => print_r($entity, TRUE)));
    entity_property_uuid_to_id($entity, 'field_collection_item', 'value');
  }
}

/**
 * Implements hook_field_uuid_load().
 */
function pfizer_deploy_fc_field_uuid_load($entity_type, $entity, $field, $instance, $langcode, &$items) {
  watchdog('pfizer_deploy_fc', 'field load: <pre>%args</pre>', array('%args' => print_r($items, TRUE)));
  entity_property_id_to_uuid($items, 'field_collection_item', 'value');
}

/**
 * Implements hook_field_uuid_presave().
 */
function pfizer_deploy_fc_field_uuid_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  watchdog('pfizer_deploy_fc', 'field presave: <pre>%args</pre>', array('%args' => print_r($items, TRUE)));
  entity_property_uuid_to_id($items, 'field_collection_item', 'value');
  // Update the revision_ids of the field to match the head revisions of the entities.
  $entity_ids = array_map(function($item) {
    return $item['value'];
  }, $items);

  $field_collections = entity_load("field_collection_item", $entity_ids);
  foreach ($items as &$item) {
    $item['revision_id'] = $field_collections[$item['value']]->revision_id;
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function pfizer_deploy_fc_entity_info_alter(&$entity_info) {
  // Set the properties bellow for field collection entity so UUIDs get created on sync.
  $entity_info['field_collection_item']['uuid'] = TRUE;
  $entity_info['field_collection_item']['entity keys']['uuid'] = 'uuid';
  $entity_info['field_collection_item']['entity keys']['revision uuid'] = 'vuuid';
  $entity_info['field_collection_item']['entity class'] = 'PfizerDeployFieldCollectionItemEntity';
}

/**
 * Implements hook_services_request_preprocess_alter().
 */
function pfizer_deploy_fc_services_request_preprocess_alter($controller, &$args) {
  foreach ($args as $i => $arg) {
    if (is_array($arg) && isset($arg['type'])) {
      foreach (field_info_instances($args[0], $arg['type']) as $fieldValue) {
        if (isset($fieldValue['type']) && $fieldValue['type'] == "field_collection") {
          foreach ($arg[$fieldValue['field_name']][LANGUAGE_NONE] as $delta => $value) {
            $target = reset(entity_get_id_by_uuid('field_collection_item', array($value['value'])));
            $args[$i][$fieldValue['field_name']][LANGUAGE_NONE][$delta] = array(
              'value' => $target,
              'revision_id' => db_query('SELECT MAX(revision_id) FROM {field_collection_item_revision}')->fetchField()
            );
          }
        }
      }
    }
  }
}

/**
 * Class PfizerDeployFieldCollectionItemEntity
 */
class PfizerDeployFieldCollectionItemEntity extends FieldCollectionItemEntity {

  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, $entityType);
  }

  public function save($skip_host_save = FALSE) {
    if (isset($this->hostEntity)) {
      // If we have a host entity save normally
      parent::save($skip_host_save);
    } else {
      // If there is no host entity, we may be receiving it from deploy.
      // so save the item directly (and force revision id to match item id).
      $this->revision = TRUE;
      entity_get_controller($this->entityType)->save($this);
    }
  }
}
